generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String @id @default(cuid())
  userId            String
  provider          String
  providerAccountId String
  type              String
  user              User   @relation(fields: [userId], references: [id])
}

model User {
  id                    String        @id @default(uuid())
  address               String        @unique
  username              String?
  nfts                  NFT[]
  listings              Listing[]
  boughtTransactions    Transaction[] @relation("BuyerTransactions")
  soldTransactions      Transaction[] @relation("SellerTransactions")
  saleHistoriesAsBuyer  SaleHistory[] @relation("BuyerSaleHistories")
  saleHistoriesAsSeller SaleHistory[] @relation("SellerSaleHistories")
  sessions              Session[]
  accounts              Account[]
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
}

model NFT {
  id              String        @id @default(uuid())
  tokenId         String
  contractAddress String
  ownerId         String
  owner           User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  metadataURI     String
  imageURI        String
  isListed        Boolean       @default(false)
  listing         Listing?
  saleHistory     SaleHistory[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  Transaction Transaction[]
}

model Listing {
  id        String        @id @default(uuid())
  nftId     String        @unique
  nft       NFT           @relation(fields: [nftId], references: [id], onDelete: Cascade)
  sellerId  String
  seller    User          @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  price     String
  status    ListingStatus @default(ACTIVE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Transaction {
  id              String   @id @default(uuid())
  nftId           String
  nft             NFT      @relation(fields: [nftId], references: [id], onDelete: Cascade)
  buyerId         String
  buyer           User     @relation(name: "BuyerTransactions", fields: [buyerId], references: [id], onDelete: Cascade)
  sellerId        String
  seller          User     @relation(name: "SellerTransactions", fields: [sellerId], references: [id], onDelete: Cascade)
  price           Float
  transactionHash String
  createdAt       DateTime @default(now())
}

model SaleHistory {
  id              String   @id @default(uuid())
  nftId           String
  nft             NFT      @relation(fields: [nftId], references: [id], onDelete: Cascade)
  sellerId        String
  seller          User     @relation(name: "SellerSaleHistories", fields: [sellerId], references: [id], onDelete: Cascade)
  buyerId         String
  buyer           User     @relation(name: "BuyerSaleHistories", fields: [buyerId], references: [id], onDelete: Cascade)
  price           Float
  transactionHash String
  createdAt       DateTime @default(now())
}

enum ListingStatus {
  ACTIVE
  SOLD
  CANCELED
}
